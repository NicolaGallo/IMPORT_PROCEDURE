// ========================================
// F3C - RELAZIONI BASIC TUTTE NAME-BASED
// ========================================

// ========================================
// 1. IMPORT RELAZIONI LAYER -> CIITEM (BY NAME)
// ========================================

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'file:///layer_rel.csv' AS row RETURN row",
  "
  // Trova Layer e CiItem usando i NOMI
  MATCH (l:Layer {name: row.layer_name})
  MATCH (ci:CiItem {name: row.ciitem_name})
  
  // Crea relazione IS_LAYER_OF
  MERGE (l)-[:IS_LAYER_OF]->(ci)
  
  RETURN l.name + ' -> ' + ci.name AS relation_created
  ",
  {
    batchSize: 10000,
    parallel: false,
    concurrency: 5,
    retries: 10
  }
);

// ========================================
// 2. IMPORT RELAZIONI TOPOLOGY -> CIITEM (BY NAME)
// ========================================

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'file:///topology_rel.csv' AS row RETURN row",
  "
  // Trova Topology e CiItem usando i NOMI
  MATCH (t:Topology {name: row.topology_name})
  MATCH (ci:CiItem {name: row.ciitem_name})
  
  // Crea relazione HAS_ELEMENT
  MERGE (t)-[:HAS_ELEMENT]->(ci)
  
  RETURN t.name + ' -> ' + ci.name AS relation_created
  ",
  {
    batchSize: 10000,
    parallel: false,
    concurrency: 5,
    retries: 10
  }
);

// ========================================
// 3. IMPORT RELAZIONI LOCATION -> CIITEM (BY NAME)
// ========================================

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'file:///location_rel.csv' AS row RETURN row",
  "
  // Trova Location e CiItem usando i NOMI
  MATCH (loc:Location {name: row.location_name})
  MATCH (ci:CiItem {name: row.ciitem_name})
  
  // Crea relazione IS_LOCATION_OF
  MERGE (loc)-[:IS_LOCATION_OF]->(ci)
  
  RETURN loc.name + ' -> ' + ci.name AS relation_created
  ",
  {
    batchSize: 10000,
    parallel: false,
    concurrency: 5,
    retries: 10
  }
);