// ========================================
// FASE 2 IMPORT CI ITEMS (NAME-BASED KEYS)
// ========================================

CALL apoc.periodic.iterate(
  "LOAD CSV WITH HEADERS FROM 'file:///ciItems.csv' AS row RETURN row",
  "
  // 1. GESTIONE ITEMTYPE (SOLO PER NOME)
  
  // Estrai e pulisci nome ItemType
  WITH row,
       CASE 
         WHEN row.itemTypeName IS NOT NULL AND row.itemTypeName <> '' AND row.itemTypeName <> 'NULL'
         THEN row.itemTypeName 
         ELSE 'Generic_Item'
       END AS finalTypeName
  
  // Cerca/Crea ItemType per Nome
  MERGE (itemType:ItemType {itemTypeName: finalTypeName})
  ON CREATE SET itemType.itemTypeId = toInteger(apoc.atomic.add({}, 'itemTypeCounter', 1, 5))
  
  // 2. GESTIONE ACCOUNT (SOLO PER NOME)
  
  WITH row, finalTypeName, itemType,
       CASE 
         WHEN row.accountName IS NOT NULL AND row.accountName <> '' AND row.accountName <> 'NULL'
         THEN row.accountName 
         ELSE 'Default Account'
       END AS finalAccountName
  
  // Cerca/Crea Account per Nome
  MERGE (account:Account {account_name: finalAccountName})
  ON CREATE SET account.account_id = toInteger(apoc.atomic.add({}, 'accountCounter', 1, 5))
  
  // 3. CREA CI ITEM
  
  MERGE (ci:CiItem {item_id: toInteger(row.item_id)})
  SET ci.itemTypeName = finalTypeName,
      ci.name = row.name,
      ci.status = row.status,
      ci.accountName = finalAccountName,
      ci.importance = row.importance,
      ci.isLink = row.isLink,
      ci.fromElement = CASE WHEN row.fromElement IS NOT NULL AND row.fromElement <> '' THEN toInteger(row.fromElement) ELSE NULL END,
      ci.toElement = CASE WHEN row.toElement IS NOT NULL AND row.toElement <> '' THEN toInteger(row.toElement) ELSE NULL END,
      ci.latitude = CASE WHEN row.latitude IS NOT NULL AND row.latitude <> '' THEN toFloat(row.latitude) ELSE NULL END,
      ci.longitude = CASE WHEN row.longitude IS NOT NULL AND row.longitude <> '' THEN toFloat(row.longitude) ELSE NULL END,
      ci.itemIcon = row.itemIcon,
      ci.style = row.style,
      ci.url = row.url
  
  // 4. GESTIONE PROPRIETÀ DINAMICHE
  
  WITH ci, row,
       [k IN keys(row) WHERE k STARTS WITH 'propKey_' AND row[k] IS NOT NULL AND row[k] <> '' AND row[k] <> 'NULL'] AS dynKeys
  
  WITH ci, row, dynKeys,
       [k IN dynKeys | row[k]] AS keysList,
       [k IN dynKeys | row['propVal_' + replace(k, 'propKey_', '')]] AS valsList
  
  // Applica proprietà dinamiche se presenti
  CALL apoc.do.when(
    size(keysList) > 0,
    'CALL apoc.create.setProperties(ci, keysList, valsList) YIELD node RETURN node',
    'RETURN ci AS node',
    {ci: ci, keysList: keysList, valsList: valsList}
  ) YIELD value
  
  RETURN ci.item_id AS processed_item
  ",
  {
    batchSize: 10000,
    parallel: false,
    concurrency: 5,
    retries: 10
  }
);